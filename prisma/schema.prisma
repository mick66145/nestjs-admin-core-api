// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  // provider = "sqlite"
  // url      = "file:./dev.db"
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  // extensions        = []
}

// **********
// Example
// **********
model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  title     String
  content   String

  @@map("post")
}

// **********
// Auth
// **********
model UserAccount {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  type        String
  account     String
  password    String    @default("")
  lastLoginAt DateTime? @map("last_login_at")

  verifications            Verification[]
  sendSmsLogs              SendSmsLog[]
  sendMailLogs             SendMailLog[]
  userAccountHasRole       UserAccountHasRole[]
  userAccountHasPermission UserAccountHasPermission[]
  user                     User[]
  verifyToken              VerifyToken[]

  @@map("user_account")
}

model Verification {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  code     String
  isValid  Boolean   @default(true) @map("is_valid")
  expireAt DateTime  @map("expire_at")
  usedAt   DateTime? @map("used_at")

  userAccountId Int         @map("user_account_id")
  userAccount   UserAccount @relation(fields: [userAccountId], references: [id], onDelete: Cascade)

  @@map("verification")
}

model SendSmsLog {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  subject     String
  destination String
  sendTime    String @map("send_time")
  result      String

  userAccountId Int         @map("user_account_id")
  userAccount   UserAccount @relation(fields: [userAccountId], references: [id], onDelete: Cascade)

  @@map("send_sms_log")
}

model SendMailLog {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  subject String
  to      String

  userAccountId Int         @map("user_account_id")
  userAccount   UserAccount @relation(fields: [userAccountId], references: [id], onDelete: Cascade)

  @@map("send_mail_log")
}

// **********
// User
// **********
model User {
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)
  name      String
  phone     String?
  email     String?
  isValid   Boolean  @default(false) @map("is_valid")
  isEnabled Boolean  @default(true) @map("is_enabled")
  isRoot    Boolean  @default(false) @map("is_root")

  userAccountId Int         @map("user_account_id")
  userAccount   UserAccount @relation(fields: [userAccountId], references: [id], onDelete: Cascade)

  @@id([userAccountId])
  @@map("user")
}

model VerifyToken {
  type  String
  token String

  userAccountId Int         @map("user_account_id")
  userAccount   UserAccount @relation(fields: [userAccountId], references: [id], onDelete: Cascade)

  @@id([userAccountId, type, token])
  @@unique([type, token])
  @@map("verify_token")
}

// **********
// Role
// **********
model Role {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz(3)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(3)
  name      String
  isEnabled Boolean   @default(true) @map("is_enabled")

  userAccountHasRole UserAccountHasRole[]
  roleHasPermission  RoleHasPermission[]

  @@map("role")
}

model RoleHasPermission {
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt  DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)
  permission String

  role   Role @relation(fields: [roleId], references: [id])
  roleId Int  @map("role_id")

  @@id([roleId, permission])
  @@map("role_has_permission")
}

model UserAccountHasRole {
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)

  userAccountId Int @map("user_account_id")
  roleId        Int @map("role_id")

  userAccount UserAccount @relation(fields: [userAccountId], references: [id], onDelete: Cascade)
  role        Role        @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userAccountId, roleId])
  @@map("user_account_has_role")
}

model UserAccountHasPermission {
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt  DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)
  permission String

  userAccountId Int         @map("user_account_id")
  userAccount   UserAccount @relation(fields: [userAccountId], references: [id], onDelete: Cascade)

  @@id([userAccountId, permission])
  @@map("user_account_has_permission")
}

model FileStorage {
  uuid           String    @id @default(uuid())
  createdAt      DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt      DateTime  @updatedAt @map("updated_at") @db.Timestamptz(3)
  deletedAt      DateTime? @map("deleted_at") @db.Timestamptz(3)
  path           String
  driver         String
  originFileName String    @map("origin_file_name")
  fileName       String    @map("file_name")
  filePath       String    @map("file_path")
  fileType       String    @map("file_type")
  fileSize       Int       @map("file_size")
  fileUrl        String    @map("file_url")

  @@map("file_storage")
}
